---
name: CI
permissions:
  contents: read

on:
  pull_request:
    branches:
      - master
    types:
      - opened
      - synchronize
      - reopened
  push:
    branches:
      - master
  workflow_dispatch:

concurrency:
  group: "${{ github.workflow }}-${{ github.ref }}"
  cancel-in-progress: true

jobs:
  setup_release:
    name: Setup Release
    outputs:
      publish_release: ${{ steps.setup_release.outputs.publish_release }}
      release_tag: ${{ steps.setup_release.outputs.release_tag }}
      release_commit: ${{ steps.setup_release.outputs.release_commit }}
    permissions:
      contents: write
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Release
        id: setup_release
        run: |
          # Simple release setup
          if [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == "refs/heads/master" ]]; then
            echo "publish_release=true" >> $GITHUB_OUTPUT
            echo "release_tag=v$(date +'%Y.%m.%d')-${{ github.run_number }}" >> $GITHUB_OUTPUT
          else
            echo "publish_release=false" >> $GITHUB_OUTPUT
            echo "release_tag=dev-build-${{ github.run_number }}" >> $GITHUB_OUTPUT
          fi
          echo "release_commit=${{ github.sha }}" >> $GITHUB_OUTPUT

  build_win:
    name: Windows
    needs: setup_release
    runs-on: windows-2022
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup Dependencies Windows
        uses: msys2/setup-msys2@v2
        with:
          msystem: ucrt64
          update: true
          install: >-
            wget

      - name: Update Windows dependencies
        env:
          gcc_version: "14.2.0-3"
        shell: msys2 {0}
        run: |
          broken_deps=(
            "mingw-w64-ucrt-x86_64-gcc"
            "mingw-w64-ucrt-x86_64-gcc-libs"
          )

          tarballs=""
          for dep in "${broken_deps[@]}"; do
            tarball="${dep}-${gcc_version}-any.pkg.tar.zst"
            wget https://repo.msys2.org/mingw/ucrt64/${tarball}
            tarballs="${tarballs} ${tarball}"
          done

          if [ -n "$tarballs" ]; then
            pacman -U --noconfirm ${tarballs}
          fi

          dependencies=(
            "git"
            "mingw-w64-ucrt-x86_64-cmake"
            "mingw-w64-ucrt-x86_64-cppwinrt"
            "mingw-w64-ucrt-x86_64-curl-winssl"
            "mingw-w64-ucrt-x86_64-graphviz"
            "mingw-w64-ucrt-x86_64-MinHook"
            "mingw-w64-ucrt-x86_64-miniupnpc"
            "mingw-w64-ucrt-x86_64-nlohmann-json"
            "mingw-w64-ucrt-x86_64-nodejs"
            "mingw-w64-ucrt-x86_64-nsis"
            "mingw-w64-ucrt-x86_64-onevpl"
            "mingw-w64-ucrt-x86_64-openssl"
            "mingw-w64-ucrt-x86_64-opus"
            "mingw-w64-ucrt-x86_64-toolchain"
          )

          pacman -Syu --noconfirm --ignore="$(IFS=,; echo "${broken_deps[*]}")" "${dependencies[@]}"

      - name: Install Doxygen
        env:
          DOXYGEN_VERSION: "1.11.0"
        run: |
          $doxy_ver = $env:DOXYGEN_VERSION
          $_doxy_ver = $doxy_ver.Replace(".", "_")

          Invoke-WebRequest -Uri `
            "https://github.com/doxygen/doxygen/releases/download/Release_${_doxy_ver}/doxygen-${doxy_ver}-setup.exe" `
            -OutFile "doxygen-setup.exe"

          Start-Process `
            -FilePath .\doxygen-setup.exe `
            -ArgumentList '/VERYSILENT' `
            -Wait `
            -NoNewWindow

          Remove-Item -Path doxygen-setup.exe

      - name: Setup python
        id: setup-python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Python Path
        id: python-path
        shell: msys2 {0}
        run: |
          python_path=$(echo "${{ steps.setup-python.outputs.python-path }}" | sed 's/\\/\\\\/g')
          echo "python-path=${python_path}"
          echo "python-path=${python_path}" >> $GITHUB_OUTPUT

      - name: Build Windows
        shell: msys2 {0}
        env:
          BRANCH: ${{ github.head_ref || github.ref_name }}
          BUILD_VERSION: ${{ needs.setup_release.outputs.release_tag }}
          COMMIT: ${{ needs.setup_release.outputs.release_commit }}
        run: |
          # Use shorter build path
          mkdir -p /c/build
          cmake \
            -B /c/build \
            -G Ninja \
            -S . \
            -DBUILD_WERROR=ON \
            -DCMAKE_BUILD_TYPE=RelWithDebInfo \
            -DSUNSHINE_ASSETS_DIR=assets \
            -DSUNSHINE_PUBLISHER_NAME='Cloud Atlas' \
            -DSUNSHINE_PUBLISHER_WEBSITE='https://cloud-atlas.eu' \
            -DSUNSHINE_PUBLISHER_ISSUE_URL='https://cloud-atlas.eu/support' \
            -DBUILD_TESTS=OFF
          ninja -C /c/build

      - name: Package Windows
        shell: msys2 {0}
        run: |
          mkdir -p artifacts
          cd /c/build
          cpack -G NSIS
          cpack -G ZIP
          cp ./cpack_artifacts/Sunshine.exe $GITHUB_WORKSPACE/artifacts/sunshine-windows-installer.exe
          cp ./cpack_artifacts/Sunshine.zip $GITHUB_WORKSPACE/artifacts/sunshine-windows-portable.zip

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: sunshine-windows
          path: artifacts/
          if-no-files-found: error

      - name: Create GitHub Release
        if: needs.setup_release.outputs.publish_release == 'true'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.setup_release.outputs.release_tag }}
          name: "Sunshine ${{ needs.setup_release.outputs.release_tag }}"
          body: |
            ## Cloud Atlas Sunshine Build
            
            Windows build created from commit: ${{ needs.setup_release.outputs.release_commit }}
            
            ### Files:
            - `sunshine-windows-installer.exe` - Windows installer
            - `sunshine-windows-portable.zip` - Portable version
          files: |
            artifacts/*
          draft: false
          prerelease: true
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
